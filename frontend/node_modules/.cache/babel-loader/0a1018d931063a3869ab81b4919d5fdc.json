{"ast":null,"code":"'use strict';\n\nimport utils from '../utils.js';\nimport parseHeaders from '../helpers/parseHeaders.js';\nvar $internals = Symbol('internals');\nvar $defaults = Symbol('defaults');\nfunction normalizeHeader(header) {\n  return header && String(header).trim().toLowerCase();\n}\nfunction normalizeValue(value) {\n  if (value === false || value == null) {\n    return value;\n  }\n  return utils.isArray(value) ? value.map(normalizeValue) : String(value);\n}\nfunction parseTokens(str) {\n  var tokens = Object.create(null);\n  var tokensRE = /([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;\n  var match;\n  while (match = tokensRE.exec(str)) {\n    tokens[match[1]] = match[2];\n  }\n  return tokens;\n}\nfunction matchHeaderValue(context, value, header, filter) {\n  if (utils.isFunction(filter)) {\n    return filter.call(this, value, header);\n  }\n  if (!utils.isString(value)) return;\n  if (utils.isString(filter)) {\n    return value.indexOf(filter) !== -1;\n  }\n  if (utils.isRegExp(filter)) {\n    return filter.test(value);\n  }\n}\nfunction formatHeader(header) {\n  return header.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g, function (w, char, str) {\n    return char.toUpperCase() + str;\n  });\n}\nfunction buildAccessors(obj, header) {\n  var accessorName = utils.toCamelCase(' ' + header);\n  ['get', 'set', 'has'].forEach(function (methodName) {\n    Object.defineProperty(obj, methodName + accessorName, {\n      value: function value(arg1, arg2, arg3) {\n        return this[methodName].call(this, header, arg1, arg2, arg3);\n      },\n      configurable: true\n    });\n  });\n}\nfunction findKey(obj, key) {\n  key = key.toLowerCase();\n  var keys = Object.keys(obj);\n  var i = keys.length;\n  var _key;\n  while (i-- > 0) {\n    _key = keys[i];\n    if (key === _key.toLowerCase()) {\n      return _key;\n    }\n  }\n  return null;\n}\nfunction AxiosHeaders(headers, defaults) {\n  headers && this.set(headers);\n  this[$defaults] = defaults || null;\n}\nObject.assign(AxiosHeaders.prototype, {\n  set: function set(header, valueOrRewrite, rewrite) {\n    var self = this;\n    function setHeader(_value, _header, _rewrite) {\n      var lHeader = normalizeHeader(_header);\n      if (!lHeader) {\n        throw new Error('header name must be a non-empty string');\n      }\n      var key = findKey(self, lHeader);\n      if (key && _rewrite !== true && (self[key] === false || _rewrite === false)) {\n        return;\n      }\n      self[key || _header] = normalizeValue(_value);\n    }\n    if (utils.isPlainObject(header)) {\n      utils.forEach(header, function (_value, _header) {\n        setHeader(_value, _header, valueOrRewrite);\n      });\n    } else {\n      setHeader(valueOrRewrite, header, rewrite);\n    }\n    return this;\n  },\n  get: function get(header, parser) {\n    header = normalizeHeader(header);\n    if (!header) return undefined;\n    var key = findKey(this, header);\n    if (key) {\n      var value = this[key];\n      if (!parser) {\n        return value;\n      }\n      if (parser === true) {\n        return parseTokens(value);\n      }\n      if (utils.isFunction(parser)) {\n        return parser.call(this, value, key);\n      }\n      if (utils.isRegExp(parser)) {\n        return parser.exec(value);\n      }\n      throw new TypeError('parser must be boolean|regexp|function');\n    }\n  },\n  has: function has(header, matcher) {\n    header = normalizeHeader(header);\n    if (header) {\n      var key = findKey(this, header);\n      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));\n    }\n    return false;\n  },\n  delete: function _delete(header, matcher) {\n    var self = this;\n    var deleted = false;\n    function deleteHeader(_header) {\n      _header = normalizeHeader(_header);\n      if (_header) {\n        var key = findKey(self, _header);\n        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {\n          delete self[key];\n          deleted = true;\n        }\n      }\n    }\n    if (utils.isArray(header)) {\n      header.forEach(deleteHeader);\n    } else {\n      deleteHeader(header);\n    }\n    return deleted;\n  },\n  clear: function clear() {\n    return Object.keys(this).forEach(this.delete.bind(this));\n  },\n  normalize: function normalize(format) {\n    var self = this;\n    var headers = {};\n    utils.forEach(this, function (value, header) {\n      var key = findKey(headers, header);\n      if (key) {\n        self[key] = normalizeValue(value);\n        delete self[header];\n        return;\n      }\n      var normalized = format ? formatHeader(header) : String(header).trim();\n      if (normalized !== header) {\n        delete self[header];\n      }\n      self[normalized] = normalizeValue(value);\n      headers[normalized] = true;\n    });\n    return this;\n  },\n  toJSON: function toJSON(asStrings) {\n    var obj = Object.create(null);\n    utils.forEach(Object.assign({}, this[$defaults] || null, this), function (value, header) {\n      if (value == null || value === false) return;\n      obj[header] = asStrings && utils.isArray(value) ? value.join(', ') : value;\n    });\n    return obj;\n  }\n});\nObject.assign(AxiosHeaders, {\n  from: function from(thing) {\n    if (utils.isString(thing)) {\n      return new this(parseHeaders(thing));\n    }\n    return thing instanceof this ? thing : new this(thing);\n  },\n  accessor: function accessor(header) {\n    var internals = this[$internals] = this[$internals] = {\n      accessors: {}\n    };\n    var accessors = internals.accessors;\n    var prototype = this.prototype;\n    function defineAccessor(_header) {\n      var lHeader = normalizeHeader(_header);\n      if (!accessors[lHeader]) {\n        buildAccessors(prototype, _header);\n        accessors[lHeader] = true;\n      }\n    }\n    utils.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);\n    return this;\n  }\n});\nAxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);\nutils.freezeMethods(AxiosHeaders.prototype);\nutils.freezeMethods(AxiosHeaders);\nexport default AxiosHeaders;","map":null,"metadata":{},"sourceType":"module"}