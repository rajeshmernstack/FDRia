{"ast":null,"code":"import _assertThisInitialized from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _toConsumableArray from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _asyncToGenerator from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"/media/rajesh/Professional Dat/mern-amazona/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(function () {\n    if (!document) {\n      return;\n    }\n    // Find script tag with same src in DOM.\n    var foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\"));\n    // Call onLoad if script marked as loaded.\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    }\n    // Create or get existed tag.\n    var script = foundScript || document.createElement(\"script\");\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n    // Mark script as loaded on load event.\n    var onLoadWithMarker = function onLoadWithMarker() {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n    script.addEventListener(\"load\", onLoadWithMarker);\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n    return function () {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nfunction useLoadGoogleCharts(param) {\n  var _param$chartVersion = param.chartVersion,\n    chartVersion = _param$chartVersion === void 0 ? \"current\" : _param$chartVersion,\n    _param$chartPackages = param.chartPackages,\n    chartPackages = _param$chartPackages === void 0 ? [\"corechart\", \"controls\"] : _param$chartPackages,\n    _param$chartLanguage = param.chartLanguage,\n    chartLanguage = _param$chartLanguage === void 0 ? \"en\" : _param$chartLanguage,\n    mapsApiKey = param.mapsApiKey;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    googleCharts = _useState2[0],\n    setGoogleCharts = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    failed = _useState4[0],\n    setFailed = _useState4[1];\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", function () {\n    // @ts-expect-error Getting object from global namespace.\n    var google = window === null || window === void 0 ? void 0 : window.google;\n    if (!google) {\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey: mapsApiKey\n    });\n    google.charts.setOnLoadCallback(function () {\n      setGoogleCharts(google);\n    });\n  }, function () {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nfunction LoadGoogleCharts(param) {\n  var onLoad = param.onLoad,\n    onError = param.onError,\n    params = _objectWithoutProperties(param, [\"onLoad\", \"onError\"]);\n  var _useLoadGoogleCharts = useLoadGoogleCharts(params),\n    _useLoadGoogleCharts2 = _slicedToArray(_useLoadGoogleCharts, 2),\n    googleCharts = _useLoadGoogleCharts2[0],\n    failed = _useLoadGoogleCharts2[1];\n  useEffect(function () {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(function () {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\nvar chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: function getChartWrapper() {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nvar uniqueID = 0;\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\nvar DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\nvar loadDataTableFromSpreadSheet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(googleViz, spreadSheetUrl) {\n    var urlParams,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urlParams = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n              var queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n              var gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n              var sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n              var access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n              var urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n              var urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n              var query = new googleViz.visualization.Query(urlToSpreadSheet);\n              query.send(function (response) {\n                if (response.isError()) {\n                  reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n                } else {\n                  resolve(response.getDataTable());\n                }\n              });\n            }));\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function loadDataTableFromSpreadSheet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar _React$createContext = /*#__PURE__*/React.createContext(chartDefaultProps),\n  Provider = _React$createContext.Provider,\n  Consumer = _React$createContext.Consumer;\nvar ContextProvider = function ContextProvider(param) {\n  var children = param.children,\n    value = param.value;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\nvar ContextConsumer = function ContextConsumer(param) {\n  var render = param.render;\n  return /*#__PURE__*/React.createElement(Consumer, null, function (context) {\n    return render(context);\n  });\n};\nvar GRAY_COLOR = \"#CCCCCC\";\nvar GoogleChartDataTableInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(GoogleChartDataTableInner, _React$Component);\n  _createClass(GoogleChartDataTableInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n      window.addEventListener(\"resize\", this.onResize);\n      if (this.props.legend_toggle || this.props.legendToggle) {\n        this.listenToLegendToggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props = this.props,\n        google = _this$props.google,\n        googleChartWrapper = _this$props.googleChartWrapper;\n      window.removeEventListener(\"resize\", this.onResize);\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n  function GoogleChartDataTableInner() {\n    var _getPrototypeOf2;\n    var _this2;\n    _classCallCheck(this, GoogleChartDataTableInner);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(GoogleChartDataTableInner)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.state = {\n      hiddenColumns: []\n    };\n    _this2.listenToLegendToggle = function () {\n      var _this2$props = _this2.props,\n        google = _this2$props.google,\n        googleChartWrapper = _this2$props.googleChartWrapper;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", function () {\n        var chart = googleChartWrapper.getChart();\n        var selection = chart.getSelection();\n        var dataTable = googleChartWrapper.getDataTable();\n        if (selection.length === 0 ||\n        // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n        var columnIndex = selection[0].column;\n        var columnID = _this2.getColumnID(dataTable, columnIndex);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          _this2.setState(function (state) {\n            return _objectSpread({}, state, {\n              hiddenColumns: _toConsumableArray(state.hiddenColumns.filter(function (colID) {\n                return colID !== columnID;\n              }))\n            });\n          });\n        } else {\n          _this2.setState(function (state) {\n            return _objectSpread({}, state, {\n              hiddenColumns: [].concat(_toConsumableArray(state.hiddenColumns), [columnID])\n            });\n          });\n        }\n      });\n    };\n    _this2.applyFormatters = function (dataTable, formatters) {\n      var google = _this2.props.google;\n      var _iterator = _createForOfIteratorHelper(formatters),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var formatter = _step.value;\n          switch (formatter.type) {\n            case \"ArrowFormat\":\n              {\n                var vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"BarFormat\":\n              {\n                var _vizFormatter = new google.visualization.BarFormat(formatter.options);\n                _vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n            case \"ColorFormat\":\n              {\n                var _vizFormatter2 = new google.visualization.ColorFormat(formatter.options);\n                var ranges = formatter.ranges;\n                var _iterator2 = _createForOfIteratorHelper(ranges),\n                  _step2;\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var range = _step2.value;\n                    _vizFormatter2.addRange.apply(_vizFormatter2, _toConsumableArray(range));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n                _vizFormatter2.format(dataTable, formatter.column);\n                break;\n              }\n            case \"DateFormat\":\n              {\n                var _vizFormatter3 = new google.visualization.DateFormat(formatter.options);\n                _vizFormatter3.format(dataTable, formatter.column);\n                break;\n              }\n            case \"NumberFormat\":\n              {\n                var _vizFormatter4 = new google.visualization.NumberFormat(formatter.options);\n                _vizFormatter4.format(dataTable, formatter.column);\n                break;\n              }\n            case \"PatternFormat\":\n              {\n                var _vizFormatter5 = new google.visualization.PatternFormat(formatter.options);\n                _vizFormatter5.format(dataTable, formatter.column);\n                break;\n              }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    _this2.getColumnID = function (dataTable, columnIndex) {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    _this2.draw = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(param) {\n        var data, diffdata, rows, columns, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, _this2$props2, google, googleChartWrapper, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = param.data, diffdata = param.diffdata, rows = param.rows, columns = param.columns, options = param.options, legend_toggle = param.legend_toggle, legendToggle = param.legendToggle, chartType = param.chartType, formatters = param.formatters, spreadSheetUrl = param.spreadSheetUrl, spreadSheetQueryParameters = param.spreadSheetQueryParameters;\n                _this2$props2 = _this2.props, google = _this2$props2.google, googleChartWrapper = _this2$props2.googleChartWrapper;\n                chartDiff = null;\n                if (diffdata) {\n                  oldData = google.visualization.arrayToDataTable(diffdata.old);\n                  newData = google.visualization.arrayToDataTable(diffdata.new);\n                  chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n                }\n                if (!(data !== null)) {\n                  _context2.next = 8;\n                  break;\n                }\n                if (Array.isArray(data)) {\n                  dataTable = google.visualization.arrayToDataTable(data);\n                } else {\n                  dataTable = new google.visualization.DataTable(data);\n                }\n                _context2.next = 19;\n                break;\n              case 8:\n                if (!(rows && columns)) {\n                  _context2.next = 12;\n                  break;\n                }\n                dataTable = google.visualization.arrayToDataTable([columns].concat(_toConsumableArray(rows)));\n                _context2.next = 19;\n                break;\n              case 12:\n                if (!spreadSheetUrl) {\n                  _context2.next = 18;\n                  break;\n                }\n                _context2.next = 15;\n                return loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n              case 15:\n                dataTable = _context2.sent;\n                _context2.next = 19;\n                break;\n              case 18:\n                dataTable = google.visualization.arrayToDataTable([]);\n              case 19:\n                columnCount = dataTable.getNumberOfColumns();\n                for (i = 0; i < columnCount; i += 1) {\n                  columnID = _this2.getColumnID(dataTable, i);\n                  if (_this2.state.hiddenColumns.includes(columnID)) {\n                    previousColumnLabel = dataTable.getColumnLabel(i);\n                    previousColumnID = dataTable.getColumnId(i);\n                    previousColumnType = dataTable.getColumnType(i);\n                    dataTable.removeColumn(i);\n                    dataTable.addColumn({\n                      label: previousColumnLabel,\n                      id: previousColumnID,\n                      type: previousColumnType\n                    });\n                  }\n                }\n                chart = googleChartWrapper.getChart();\n                if (googleChartWrapper.getChartType() === \"Timeline\") {\n                  chart && chart.clearChart();\n                }\n                googleChartWrapper.setChartType(chartType);\n                googleChartWrapper.setOptions(options || {});\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n                if (_this2.props.googleChartDashboard !== null) {\n                  _this2.props.googleChartDashboard.draw(dataTable);\n                }\n                if (chartDiff) {\n                  googleChartWrapper.setDataTable(chartDiff);\n                  googleChartWrapper.draw();\n                }\n                if (formatters) {\n                  _this2.applyFormatters(dataTable, formatters);\n                  googleChartWrapper.setDataTable(dataTable);\n                  googleChartWrapper.draw();\n                }\n                if (legendToggle === true || legend_toggle === true) {\n                  _this2.grayOutHiddenColumns({\n                    options: options\n                  });\n                }\n                return _context2.abrupt(\"return\");\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    _this2.grayOutHiddenColumns = function (param) {\n      var options = param.options;\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      var dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      var columnCount = dataTable.getNumberOfColumns();\n      var hasAHiddenColumn = _this2.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      var colors = Array.from({\n        length: columnCount - 1\n      }).map(function (dontcare, i) {\n        var columnID = _this2.getColumnID(dataTable, i + 1);\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions(_objectSpread({}, options, {\n        colors: colors\n      }));\n      googleChartWrapper.draw();\n    };\n    _this2.onResize = function () {\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      googleChartWrapper.draw();\n    };\n    return _this2;\n  }\n  return GoogleChartDataTableInner;\n}(React.Component);\nvar GoogleChartDataTable = /*#__PURE__*/function (_React$Component2) {\n  _inherits(GoogleChartDataTable, _React$Component2);\n  function GoogleChartDataTable() {\n    _classCallCheck(this, GoogleChartDataTable);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleChartDataTable).apply(this, arguments));\n  }\n  _createClass(GoogleChartDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        google = _this$props2.google,\n        googleChartWrapper = _this$props2.googleChartWrapper,\n        googleChartDashboard = _this$props2.googleChartDashboard;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n            google: google,\n            googleChartWrapper: googleChartWrapper,\n            googleChartDashboard: googleChartDashboard\n          }));\n        }\n      });\n    }\n  }]);\n  return GoogleChartDataTable;\n}(React.Component);\nvar GoogleChartEvents = /*#__PURE__*/function (_React$Component3) {\n  _inherits(GoogleChartEvents, _React$Component3);\n  function GoogleChartEvents() {\n    _classCallCheck(this, GoogleChartEvents);\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleChartEvents).apply(this, arguments));\n  }\n  _createClass(GoogleChartEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"listenToEvents\",\n    value: function listenToEvents(param) {\n      var _this3 = this;\n      var chartEvents = param.chartEvents,\n        google = param.google,\n        googleChartWrapper = param.googleChartWrapper;\n      if (!chartEvents) {\n        return;\n      }\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n      var _iterator3 = _createForOfIteratorHelper(chartEvents),\n        _step3;\n      try {\n        var _loop = function _loop() {\n          var event = _step3.value;\n          _this = _this3;\n          var eventName = event.eventName,\n            callback = event.callback;\n          google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            callback({\n              chartWrapper: googleChartWrapper,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        };\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _this;\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n      var _this$props3 = this.props,\n        google = _this$props3.google,\n        googleChartWrapper = _this$props3.googleChartWrapper;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(propsFromContext) {\n          _this4.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google: google,\n            googleChartWrapper: googleChartWrapper\n          });\n          return null;\n        }\n      });\n    }\n  }]);\n  return GoogleChartEvents;\n}(React.Component);\nvar controlCounter = 0;\nvar GoogleChart = /*#__PURE__*/function (_React$Component4) {\n  _inherits(GoogleChart, _React$Component4);\n  _createClass(GoogleChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n        options = _this$props4.options,\n        google = _this$props4.google,\n        chartType = _this$props4.chartType,\n        chartWrapperParams = _this$props4.chartWrapperParams,\n        toolbarItems = _this$props4.toolbarItems,\n        getChartEditor = _this$props4.getChartEditor,\n        getChartWrapper = _this$props4.getChartWrapper;\n      var chartConfig = _objectSpread({\n        chartType: chartType,\n        options: options,\n        containerId: this.getGraphID()\n      }, chartWrapperParams);\n      var googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n      googleChartWrapper.setOptions(options || {});\n      if (getChartWrapper) {\n        getChartWrapper(googleChartWrapper, google);\n      }\n      var googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n      var googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n      if (toolbarItems) {\n        google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n      }\n      var googleChartEditor = null;\n      if (getChartEditor) {\n        googleChartEditor = new google.visualization.ChartEditor();\n        getChartEditor({\n          chartEditor: googleChartEditor,\n          chartWrapper: googleChartWrapper,\n          google: google\n        });\n      }\n      this.setState({\n        googleChartEditor: googleChartEditor,\n        googleChartControls: googleChartControls,\n        googleChartDashboard: googleChartDashboard,\n        googleChartWrapper: googleChartWrapper,\n        isReady: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.googleChartWrapper) return;\n      if (!this.state.googleChartDashboard) return;\n      if (!this.state.googleChartControls) return;\n      var controls = this.props.controls;\n      if (controls) {\n        for (var i = 0; i < controls.length; i += 1) {\n          var _controls$i = controls[i],\n            controlType = _controls$i.controlType,\n            options = _controls$i.options,\n            controlWrapperParams = _controls$i.controlWrapperParams;\n          if (controlWrapperParams && \"state\" in controlWrapperParams) {\n            this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n          }\n          this.state.googleChartControls[i].control.setOptions(options);\n          this.state.googleChartControls[i].control.setControlType(controlType);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n        width = _this$props5.width,\n        height = _this$props5.height,\n        options = _this$props5.options,\n        style = _this$props5.style;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      if (this.props.render) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.toolbar_ref,\n          id: \"toolbar\"\n        }), this.props.render({\n          renderChart: this.renderChart,\n          renderControl: this.renderControl,\n          renderToolbar: this.renderToolBar\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition !== \"bottom\";\n        }), this.renderChart(), this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition === \"bottom\";\n        }), this.renderToolBar());\n      }\n    }\n  }]);\n  function GoogleChart() {\n    var _this5;\n    for (var _len3 = arguments.length, args1 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args1[_key3] = arguments[_key3];\n    }\n    _classCallCheck(this, GoogleChart);\n    var _this1;\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(GoogleChart).call(this)), _this1 = _assertThisInitialized(_assertThisInitialized(_this5));\n    _this5.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    _this5.graphID = null;\n    _this5.dashboard_ref = /*#__PURE__*/React.createRef();\n    _this5.toolbar_ref = /*#__PURE__*/React.createRef();\n    _this5.getGraphID = function () {\n      var _this5$props = _this5.props,\n        graphID = _this5$props.graphID,\n        graph_id = _this5$props.graph_id;\n      var instanceGraphID;\n      if (!graphID && !graph_id) {\n        if (!_this5.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = _this5.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n      _this5.graphID = instanceGraphID;\n      return _this5.graphID;\n    };\n    _this5.getControlID = function (id, index) {\n      controlCounter += 1;\n      var controlID;\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n      return controlID;\n    };\n    _this5.addControls = function (googleChartWrapper, googleChartDashboard) {\n      var _this5$props2 = _this5.props,\n        google = _this5$props2.google,\n        controls = _this5$props2.controls;\n      var googleChartControls = !controls ? null : controls.map(function (control, i) {\n        var controlIDMaybe = control.controlID,\n          controlType = control.controlType,\n          controlOptions = control.options,\n          controlWrapperParams = control.controlWrapperParams;\n        var controlID = _this5.getControlID(controlIDMaybe, i);\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper(_objectSpread({\n            containerId: controlID,\n            controlType: controlType,\n            options: controlOptions\n          }, controlWrapperParams))\n        };\n      });\n      if (!googleChartControls) {\n        return null;\n      }\n      googleChartDashboard.bind(googleChartControls.map(function (param) {\n        var control = param.control;\n        return control;\n      }), googleChartWrapper);\n      var _iterator4 = _createForOfIteratorHelper(googleChartControls),\n        _step4;\n      try {\n        var _loop2 = function _loop2() {\n          var chartControl = _step4.value;\n          var control = chartControl.control,\n            controlProp = chartControl.controlProp;\n          var _controlProp$controlE = controlProp.controlEvents,\n            controlEvents = _controlProp$controlE === void 0 ? [] : _controlProp$controlE;\n          var _iterator5 = _createForOfIteratorHelper(controlEvents),\n            _step5;\n          try {\n            var _loop3 = function _loop3() {\n              var event = _step5.value;\n              _this = _assertThisInitialized(_assertThisInitialized(_this5));\n              var callback = event.callback,\n                eventName = event.eventName;\n              google.visualization.events.removeListener(control, eventName, callback);\n              google.visualization.events.addListener(control, eventName, function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n                callback({\n                  chartWrapper: googleChartWrapper,\n                  controlWrapper: control,\n                  props: _this.props,\n                  google: google,\n                  eventArgs: args\n                });\n              });\n            };\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              _loop3();\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _this;\n          _loop2();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return googleChartControls;\n    };\n    _this5.renderChart = function () {\n      var _this5$props3 = _this5.props,\n        width = _this5$props3.width,\n        height = _this5$props3.height,\n        options = _this5$props3.options,\n        style = _this5$props3.style,\n        className = _this5$props3.className,\n        rootProps = _this5$props3.rootProps,\n        google = _this5$props3.google;\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: _this5.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), _this5.state.isReady && _this5.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: _this5.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n    _this5.renderControl = function () {\n      var filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function (param) {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(function (param) {\n        var controlProp = param.controlProp,\n          control = param.control;\n        return filter({\n          control: control,\n          controlProp: controlProp\n        });\n      }).map(function (param) {\n        var control = param.control,\n          controlProp = param.controlProp;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n    _this5.renderToolBar = function () {\n      if (!_this5.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: _this5.toolbar_ref\n      });\n    };\n    return _this5;\n  }\n  return GoogleChart;\n}(React.Component);\nvar Chart$1 = /*#__PURE__*/function (_React$Component5) {\n  _inherits(Chart$1, _React$Component5);\n  _createClass(Chart$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        chartLanguage = _this$props6.chartLanguage,\n        chartPackages = _this$props6.chartPackages,\n        chartVersion = _this$props6.chartVersion,\n        mapsApiKey = _this$props6.mapsApiKey,\n        loader = _this$props6.loader,\n        errorElement = _this$props6.errorElement;\n      return /*#__PURE__*/React.createElement(ContextProvider, {\n        value: this.props\n      }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n        google: this.state.google\n      })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n        chartLanguage: chartLanguage,\n        chartPackages: chartPackages,\n        chartVersion: chartVersion,\n        mapsApiKey: mapsApiKey,\n        onLoad: this.onLoad,\n        onError: this.onError\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"isFullyLoaded\",\n    value: function isFullyLoaded(google) {\n      var _this$props7 = this.props,\n        controls = _this$props7.controls,\n        toolbarItems = _this$props7.toolbarItems,\n        getChartEditor = _this$props7.getChartEditor;\n      return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n  }]);\n  function Chart$1() {\n    var _getPrototypeOf3;\n    var _this6;\n    _classCallCheck(this, Chart$1);\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    _this6 = _possibleConstructorReturn(this, (_getPrototypeOf3 = _getPrototypeOf(Chart$1)).call.apply(_getPrototypeOf3, [this].concat(args)));\n    _this6._isMounted = false;\n    _this6.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n    _this6.onLoad = function (google1) {\n      if (_this6.props.onLoad) {\n        _this6.props.onLoad(google1);\n      }\n      if (_this6.isFullyLoaded(google1)) {\n        _this6.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        var id = setInterval(function () {\n          var google = window.google;\n          if (_this6._isMounted) {\n            if (google && _this6.isFullyLoaded(google)) {\n              clearInterval(id);\n              _this6.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n    _this6.onSuccess = function (google) {\n      _this6.setState({\n        loadingStatus: \"ready\",\n        google: google\n      });\n    };\n    _this6.onError = function () {\n      _this6.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n    return _this6;\n  }\n  return Chart$1;\n}(React.Component);\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":null,"metadata":{},"sourceType":"module"}