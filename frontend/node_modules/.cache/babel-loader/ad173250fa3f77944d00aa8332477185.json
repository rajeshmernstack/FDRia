{"ast":null,"code":"import React__default, { isValidElement, useRef, useLayoutEffect, useEffect, useReducer, useState, cloneElement, createElement } from 'react';\nimport cx from 'clsx';\nimport { render } from 'react-dom';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction isNum(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\nfunction isBool(v) {\n  return typeof v === 'boolean';\n}\nfunction isStr(v) {\n  return typeof v === 'string';\n}\nfunction isFn(v) {\n  return typeof v === 'function';\n}\nfunction parseClassName(v) {\n  return isStr(v) || isFn(v) ? v : null;\n}\nfunction isToastIdValid(toastId) {\n  return toastId === 0 || toastId;\n}\nfunction getAutoCloseDelay(toastAutoClose, containerAutoClose) {\n  return toastAutoClose === false || isNum(toastAutoClose) && toastAutoClose > 0 ? toastAutoClose : containerAutoClose;\n}\nvar canUseDom = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction canBeRendered(content) {\n  return isValidElement(content) || isStr(content) || isFn(content) || isNum(content);\n}\nvar POSITION = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\nvar TYPE = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\n/**\r\n * Used to collapse toast after exit animation\r\n */\nfunction collapseToast(node, done, duration\n/* COLLAPSE_DURATION */) {\n  if (duration === void 0) {\n    duration = 300;\n  }\n  var scrollHeight = node.scrollHeight,\n    style = node.style;\n  requestAnimationFrame(function () {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = \"all \" + duration + \"ms\";\n    requestAnimationFrame(function () {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration);\n    });\n  });\n}\n\n/**\r\n * Css animation that just work.\r\n * You could use animate.css for instance\r\n *\r\n *\r\n * ```\r\n * cssTransition({\r\n *   enter: \"animate__animated animate__bounceIn\",\r\n *   exit: \"animate__animated animate__bounceOut\"\r\n * })\r\n * ```\r\n *\r\n */\n\nfunction cssTransition(_ref) {\n  var enter = _ref.enter,\n    exit = _ref.exit,\n    _ref$appendPosition = _ref.appendPosition,\n    appendPosition = _ref$appendPosition === void 0 ? false : _ref$appendPosition,\n    _ref$collapse = _ref.collapse,\n    collapse = _ref$collapse === void 0 ? true : _ref$collapse,\n    _ref$collapseDuration = _ref.collapseDuration,\n    collapseDuration = _ref$collapseDuration === void 0 ? 300 : _ref$collapseDuration;\n  return function ToastTransition(_ref2) {\n    var children = _ref2.children,\n      position = _ref2.position,\n      preventExitTransition = _ref2.preventExitTransition,\n      done = _ref2.done,\n      nodeRef = _ref2.nodeRef,\n      isIn = _ref2.isIn;\n    var enterClassName = appendPosition ? enter + \"--\" + position : enter;\n    var exitClassName = appendPosition ? exit + \"--\" + position : exit;\n    var baseClassName = useRef();\n    var animationStep = useRef(0\n    /* Enter */);\n\n    useLayoutEffect(function () {\n      onEnter();\n    }, []);\n    useEffect(function () {\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n    function onEnter() {\n      var node = nodeRef.current;\n      baseClassName.current = node.className;\n      node.className += \" \" + enterClassName;\n      node.addEventListener('animationend', onEntered);\n      node.addEventListener('animationcancel', onEntered);\n    }\n    function onEntered(e) {\n      if (e.target !== nodeRef.current) return;\n      var node = nodeRef.current;\n      node.dispatchEvent(new Event(\"d\"\n      /* ENTRANCE_ANIMATION_END */));\n\n      node.removeEventListener('animationend', onEntered);\n      node.removeEventListener('animationcancel', onEntered);\n      if (animationStep.current === 0\n      /* Enter */) {\n        node.className = baseClassName.current;\n      }\n    }\n    function onExit() {\n      animationStep.current = 1\n      /* Exit */;\n\n      var node = nodeRef.current;\n      node.className += \" \" + exitClassName;\n      node.addEventListener('animationend', onExited);\n    }\n    function onExited() {\n      var node = nodeRef.current;\n      node.removeEventListener('animationend', onExited);\n      collapse ? collapseToast(node, done, collapseDuration) : done();\n    }\n    return React__default.createElement(React__default.Fragment, null, children);\n  };\n}\nvar eventManager = {\n  list: /*#__PURE__*/new Map(),\n  emitQueue: /*#__PURE__*/new Map(),\n  on: function on(event, callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event).push(callback);\n    return this;\n  },\n  off: function off(event, callback) {\n    if (callback) {\n      var cb = this.list.get(event).filter(function (cb) {\n        return cb !== callback;\n      });\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list[\"delete\"](event);\n    return this;\n  },\n  cancelEmit: function cancelEmit(event) {\n    var timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue[\"delete\"](event);\n    }\n    return this;\n  },\n  /**\r\n   * Enqueue the event at the end of the call stack\r\n   * Doing so let the user call toast as follow:\r\n   * toast('1')\r\n   * toast('2')\r\n   * toast('3')\r\n   * Without setTimemout the code above will not work\r\n   */\n  emit: function emit(event) {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    this.list.has(event) && this.list.get(event).forEach(function (callback) {\n      var timer = setTimeout(function () {\n        // @ts-ignore\n        callback.apply(void 0, args);\n      }, 0);\n      _this.emitQueue.has(event) || _this.emitQueue.set(event, []);\n      _this.emitQueue.get(event).push(timer);\n    });\n  }\n};\nvar _excluded = [\"delay\", \"staleId\"];\nfunction useToastContainer(props) {\n  var _useReducer = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    forceUpdate = _useReducer[1];\n  var _useState = useState([]),\n    toastIds = _useState[0],\n    setToastIds = _useState[1];\n  var containerRef = useRef(null);\n  var toastToRender = useRef(new Map()).current;\n  var isToastActive = function isToastActive(id) {\n    return toastIds.indexOf(id) !== -1;\n  };\n  var instance = useRef({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props: props,\n    containerId: null,\n    isToastActive: isToastActive,\n    getToast: function getToast(id) {\n      return toastToRender.get(id);\n    }\n  }).current;\n  useEffect(function () {\n    instance.containerId = props.containerId;\n    eventManager.cancelEmit(3\n    /* WillUnmount */).on(0\n    /* Show */, buildToast).on(1\n    /* Clear */, function (toastId) {\n      return containerRef.current && removeToast(toastId);\n    }).on(5\n    /* ClearWaitingQueue */, clearWaitingQueue).emit(2\n    /* DidMount */, instance);\n    return function () {\n      return eventManager.emit(3\n      /* WillUnmount */, instance);\n    };\n  }, []);\n  useEffect(function () {\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n    eventManager.emit(4\n    /* Change */, toastIds.length, props.containerId);\n  }, [toastIds]);\n  useEffect(function () {\n    instance.props = props;\n  });\n  function clearWaitingQueue(_ref) {\n    var containerId = _ref.containerId;\n    var limit = instance.props.limit;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n  function removeToast(toastId) {\n    setToastIds(function (state) {\n      return isToastIdValid(toastId) ? state.filter(function (id) {\n        return id !== toastId;\n      }) : [];\n    });\n  }\n  function dequeueToast() {\n    var _instance$queue$shift = instance.queue.shift(),\n      toastContent = _instance$queue$shift.toastContent,\n      toastProps = _instance$queue$shift.toastProps,\n      staleId = _instance$queue$shift.staleId;\n    appendToast(toastContent, toastProps, staleId);\n  }\n  /**\r\n   * check if a container is attached to the dom\r\n   * check for multi-container, build only if associated\r\n   * check for duplicate toastId if no update\r\n   */\n\n  function isNotValid(options) {\n    return !containerRef.current || instance.props.enableMultiContainer && options.containerId !== instance.props.containerId || toastToRender.has(options.toastId) && options.updateId == null;\n  } // this function and all the function called inside needs to rely on refs\n\n  function buildToast(content, _ref2) {\n    var delay = _ref2.delay,\n      staleId = _ref2.staleId,\n      options = _objectWithoutPropertiesLoose(_ref2, _excluded);\n    if (!canBeRendered(content) || isNotValid(options)) return;\n    var toastId = options.toastId,\n      updateId = options.updateId,\n      data = options.data;\n    var props = instance.props;\n    var closeToast = function closeToast() {\n      return removeToast(toastId);\n    };\n    var isNotAnUpdate = updateId == null;\n    if (isNotAnUpdate) instance.count++;\n    var toastProps = {\n      toastId: toastId,\n      updateId: updateId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || props.position,\n      transition: options.transition || props.transition,\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(options.bodyClassName || props.bodyClassName),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover) ? options.pauseOnHover : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss) ? options.pauseOnFocusLoss : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable) ? options.draggable : props.draggable,\n      draggablePercent: options.draggablePercent || props.draggablePercent,\n      draggableDirection: options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick) ? options.closeOnClick : props.closeOnClick,\n      progressClassName: parseClassName(options.progressClassName || props.progressClassName),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading ? false : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar) ? options.hideProgressBar : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n      deleteToast: function deleteToast() {\n        toastToRender[\"delete\"](toastId);\n        var queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId) ? instance.count - 1 : instance.count - instance.displayedToast;\n        if (instance.count < 0) instance.count = 0;\n        if (queueLen > 0) {\n          var freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit;\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            var toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n            for (var i = 0; i < toDequeue; i++) {\n              dequeueToast();\n            }\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    };\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n    toastProps.closeButton = props.closeButton;\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n    }\n    var toastContent = content;\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast: closeToast,\n        toastProps: toastProps,\n        data: data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({\n        closeToast: closeToast,\n        toastProps: toastProps,\n        data: data\n      });\n    } // not handling limit + delay by design. Waiting for user feedback first\n\n    if (props.limit && props.limit > 0 && instance.count > props.limit && isNotAnUpdate) {\n      instance.queue.push({\n        toastContent: toastContent,\n        toastProps: toastProps,\n        staleId: staleId\n      });\n    } else if (isNum(delay) && delay > 0) {\n      setTimeout(function () {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n  function appendToast(content, toastProps, staleId) {\n    var toastId = toastProps.toastId;\n    if (staleId) toastToRender[\"delete\"](staleId);\n    toastToRender.set(toastId, {\n      content: content,\n      props: toastProps\n    });\n    setToastIds(function (state) {\n      return [].concat(state, [toastId]).filter(function (id) {\n        return id !== staleId;\n      });\n    });\n  }\n  function getToastToRender(cb) {\n    var toRender = new Map();\n    var collection = Array.from(toastToRender.values());\n    if (props.newestOnTop) collection.reverse();\n    collection.forEach(function (toast) {\n      var position = toast.props.position;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position).push(toast);\n    });\n    return Array.from(toRender, function (p) {\n      return cb(p[0], p[1]);\n    });\n  }\n  return {\n    getToastToRender: getToastToRender,\n    containerRef: containerRef,\n    isToastActive: isToastActive\n  };\n}\nfunction getX(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;\n}\nfunction getY(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;\n}\nfunction useToast(props) {\n  var _useState = useState(false),\n    isRunning = _useState[0],\n    setIsRunning = _useState[1];\n  var _useState2 = useState(false),\n    preventExitTransition = _useState2[0],\n    setPreventExitTransition = _useState2[1];\n  var toastRef = useRef(null);\n  var drag = useRef({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  var syncProps = useRef(props);\n  var autoClose = props.autoClose,\n    pauseOnHover = props.pauseOnHover,\n    closeToast = props.closeToast,\n    onClick = props.onClick,\n    closeOnClick = props.closeOnClick;\n  useEffect(function () {\n    syncProps.current = props;\n  });\n  useEffect(function () {\n    if (toastRef.current) toastRef.current.addEventListener(\"d\"\n    /* ENTRANCE_ANIMATION_END */, playToast, {\n      once: true\n    });\n    if (isFn(props.onOpen)) props.onOpen(isValidElement(props.children) && props.children.props);\n    return function () {\n      var props = syncProps.current;\n      if (isFn(props.onClose)) props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n  useEffect(function () {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return function () {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n  function onDragStart(e) {\n    if (props.draggable) {\n      bindDragEvents();\n      var toast = toastRef.current;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent);\n      drag.y = getY(e.nativeEvent);\n      if (props.draggableDirection === \"x\"\n      /* X */) {\n        drag.start = drag.x;\n        drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance = toast.offsetHeight * (props.draggablePercent === 80\n        /* DRAGGABLE_PERCENT */ ? props.draggablePercent * 1.5 : props.draggablePercent / 100);\n      }\n    }\n  }\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      var _drag$boundingRect = drag.boundingRect,\n        top = _drag$boundingRect.top,\n        bottom = _drag$boundingRect.bottom,\n        left = _drag$boundingRect.left,\n        right = _drag$boundingRect.right;\n      if (props.pauseOnHover && drag.x >= left && drag.x <= right && drag.y >= top && drag.y <= bottom) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n  function playToast() {\n    setIsRunning(true);\n  }\n  function pauseToast() {\n    setIsRunning(false);\n  }\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n  function onDragMove(e) {\n    var toast = toastRef.current;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e);\n      drag.y = getY(e);\n      if (props.draggableDirection === \"x\"\n      /* X */) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      } // prevent false positif during a toast click\n\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = \"translate\" + props.draggableDirection + \"(\" + drag.delta + \"px)\";\n      toast.style.opacity = \"\" + (1 - Math.abs(drag.delta / drag.removalDistance));\n    }\n  }\n  function onDragEnd() {\n    unbindDragEvents();\n    var toast = toastRef.current;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = \"translate\" + props.draggableDirection + \"(0)\";\n      toast.style.opacity = '1';\n    }\n  }\n  var eventHandlers = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  } // prevent toast from closing when user drags the toast\n\n  if (closeOnClick) {\n    eventHandlers.onClick = function (e) {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n  return {\n    playToast: playToast,\n    pauseToast: pauseToast,\n    isRunning: isRunning,\n    preventExitTransition: preventExitTransition,\n    toastRef: toastRef,\n    eventHandlers: eventHandlers\n  };\n}\nfunction CloseButton(_ref) {\n  var closeToast = _ref.closeToast,\n    theme = _ref.theme,\n    _ref$ariaLabel = _ref.ariaLabel,\n    ariaLabel = _ref$ariaLabel === void 0 ? 'close' : _ref$ariaLabel;\n  return createElement(\"button\", {\n    className: \"Toastify\"\n    /* CSS_NAMESPACE */ + \"__close-button \" + \"Toastify\"\n    /* CSS_NAMESPACE */ + \"__close-button--\" + theme,\n    type: \"button\",\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      closeToast(e);\n    },\n    \"aria-label\": ariaLabel\n  }, createElement(\"svg\", {\n    \"aria-hidden\": \"true\",\n    viewBox: \"0 0 14 16\"\n  }, createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n  })));\n}\nfunction ProgressBar(_ref) {\n  var _cx, _animationEvent;\n  var delay = _ref.delay,\n    isRunning = _ref.isRunning,\n    closeToast = _ref.closeToast,\n    type = _ref.type,\n    hide = _ref.hide,\n    className = _ref.className,\n    userStyle = _ref.style,\n    controlledProgress = _ref.controlledProgress,\n    progress = _ref.progress,\n    rtl = _ref.rtl,\n    isIn = _ref.isIn,\n    theme = _ref.theme;\n  var style = _extends({}, userStyle, {\n    animationDuration: delay + \"ms\",\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  });\n  if (controlledProgress) style.transform = \"scaleX(\" + progress + \")\";\n  var defaultClassName = cx(\"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar\", controlledProgress ? \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar--controlled\" : \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar--animated\", \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar-theme--\" + theme, \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar--\" + type, (_cx = {}, _cx[\"Toastify\"\n  /* CSS_NAMESPACE */ + \"__progress-bar--rtl\"] = rtl, _cx));\n  var classNames = isFn(className) ? className({\n    rtl: rtl,\n    type: type,\n    defaultClassName: defaultClassName\n  }) : cx(defaultClassName, className); // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n\n  var animationEvent = (_animationEvent = {}, _animationEvent[controlledProgress && progress >= 1 ? 'onTransitionEnd' : 'onAnimationEnd'] = controlledProgress && progress < 1 ? null : function () {\n    isIn && closeToast();\n  }, _animationEvent); // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return createElement(\"div\", Object.assign({\n    role: \"progressbar\",\n    \"aria-hidden\": hide ? 'true' : 'false',\n    \"aria-label\": \"notification timer\",\n    className: classNames,\n    style: style\n  }, animationEvent));\n}\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\nvar _excluded$1 = [\"theme\", \"type\"];\nvar Svg = function Svg(_ref) {\n  var theme = _ref.theme,\n    type = _ref.type,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  return createElement(\"svg\", Object.assign({\n    viewBox: \"0 0 24 24\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: theme === 'colored' ? 'currentColor' : \"var(--toastify-icon-color-\" + type + \")\"\n  }, rest));\n};\nfunction Warning(props) {\n  return createElement(Svg, Object.assign({}, props), createElement(\"path\", {\n    d: \"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\"\n  }));\n}\nfunction Info(props) {\n  return createElement(Svg, Object.assign({}, props), createElement(\"path\", {\n    d: \"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\"\n  }));\n}\nfunction Success(props) {\n  return createElement(Svg, Object.assign({}, props), createElement(\"path\", {\n    d: \"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\"\n  }));\n}\nfunction Error(props) {\n  return createElement(Svg, Object.assign({}, props), createElement(\"path\", {\n    d: \"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\"\n  }));\n}\nfunction Spinner() {\n  return createElement(\"div\", {\n    className: \"Toastify\"\n    /* CSS_NAMESPACE */ + \"__spinner\"\n  });\n}\nvar Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\nvar Toast = function Toast(props) {\n  var _cx, _cx2;\n  var _useToast = useToast(props),\n    isRunning = _useToast.isRunning,\n    preventExitTransition = _useToast.preventExitTransition,\n    toastRef = _useToast.toastRef,\n    eventHandlers = _useToast.eventHandlers;\n  var closeButton = props.closeButton,\n    children = props.children,\n    autoClose = props.autoClose,\n    onClick = props.onClick,\n    type = props.type,\n    hideProgressBar = props.hideProgressBar,\n    closeToast = props.closeToast,\n    Transition = props.transition,\n    position = props.position,\n    className = props.className,\n    style = props.style,\n    bodyClassName = props.bodyClassName,\n    bodyStyle = props.bodyStyle,\n    progressClassName = props.progressClassName,\n    progressStyle = props.progressStyle,\n    updateId = props.updateId,\n    role = props.role,\n    progress = props.progress,\n    rtl = props.rtl,\n    toastId = props.toastId,\n    deleteToast = props.deleteToast,\n    isIn = props.isIn,\n    isLoading = props.isLoading,\n    icon = props.icon,\n    theme = props.theme;\n  var defaultClassName = cx(\"Toastify\"\n  /* CSS_NAMESPACE */ + \"__toast\", \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__toast-theme--\" + theme, \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__toast--\" + type, (_cx = {}, _cx[\"Toastify\"\n  /* CSS_NAMESPACE */ + \"__toast--rtl\"] = rtl, _cx));\n  var cssClasses = isFn(className) ? className({\n    rtl: rtl,\n    position: position,\n    type: type,\n    defaultClassName: defaultClassName\n  }) : cx(defaultClassName, className);\n  var isProgressControlled = !!progress;\n  var maybeIcon = Icons[type];\n  var iconProps = {\n    theme: theme,\n    type: type\n  };\n  var Icon = maybeIcon && maybeIcon(iconProps);\n  if (icon === false) {\n    Icon = void 0;\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  }\n  function renderCloseButton(closeButton) {\n    if (!closeButton) return;\n    var props = {\n      closeToast: closeToast,\n      type: type,\n      theme: theme\n    };\n    if (isFn(closeButton)) return closeButton(props);\n    if (isValidElement(closeButton)) return cloneElement(closeButton, props);\n  }\n  return createElement(Transition, {\n    isIn: isIn,\n    done: deleteToast,\n    position: position,\n    preventExitTransition: preventExitTransition,\n    nodeRef: toastRef\n  }, createElement(\"div\", Object.assign({\n    id: toastId,\n    onClick: onClick,\n    className: cssClasses\n  }, eventHandlers, {\n    style: style,\n    ref: toastRef\n  }), createElement(\"div\", Object.assign({}, isIn && {\n    role: role\n  }, {\n    className: isFn(bodyClassName) ? bodyClassName({\n      type: type\n    }) : cx(\"Toastify\"\n    /* CSS_NAMESPACE */ + \"__toast-body\", bodyClassName),\n    style: bodyStyle\n  }), Icon && createElement(\"div\", {\n    className: cx(\"Toastify\"\n    /* CSS_NAMESPACE */ + \"__toast-icon\", (_cx2 = {}, _cx2[\"Toastify\"\n    /* CSS_NAMESPACE */ + \"--animate-icon \" + \"Toastify\"\n    /* CSS_NAMESPACE */ + \"__zoom-enter\"] = !isLoading, _cx2))\n  }, Icon), createElement(\"div\", null, children)), renderCloseButton(closeButton), (autoClose || isProgressControlled) && createElement(ProgressBar, Object.assign({}, updateId && !isProgressControlled ? {\n    key: \"pb-\" + updateId\n  } : {}, {\n    rtl: rtl,\n    theme: theme,\n    delay: autoClose,\n    isRunning: isRunning,\n    isIn: isIn,\n    closeToast: closeToast,\n    hide: hideProgressBar,\n    type: type,\n    style: progressStyle,\n    className: progressClassName,\n    controlledProgress: isProgressControlled,\n    progress: progress\n  }))));\n};\nvar Bounce = /*#__PURE__*/cssTransition({\n  enter: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__bounce-enter\",\n  exit: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__bounce-exit\",\n  appendPosition: true\n});\nvar Slide = /*#__PURE__*/cssTransition({\n  enter: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__slide-enter\",\n  exit: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__slide-exit\",\n  appendPosition: true\n});\nvar Zoom = /*#__PURE__*/cssTransition({\n  enter: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__zoom-enter\",\n  exit: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__zoom-exit\"\n});\nvar Flip = /*#__PURE__*/cssTransition({\n  enter: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__flip-enter\",\n  exit: \"Toastify\"\n  /* CSS_NAMESPACE */ + \"--animate \" + \"Toastify\"\n  /* CSS_NAMESPACE */ + \"__flip-exit\"\n});\nvar ToastContainer = function ToastContainer(props) {\n  var _useToastContainer = useToastContainer(props),\n    getToastToRender = _useToastContainer.getToastToRender,\n    containerRef = _useToastContainer.containerRef,\n    isToastActive = _useToastContainer.isToastActive;\n  var className = props.className,\n    style = props.style,\n    rtl = props.rtl,\n    containerId = props.containerId;\n  function getClassName(position) {\n    var _cx;\n    var defaultClassName = cx(\"Toastify\"\n    /* CSS_NAMESPACE */ + \"__toast-container\", \"Toastify\"\n    /* CSS_NAMESPACE */ + \"__toast-container--\" + position, (_cx = {}, _cx[\"Toastify\"\n    /* CSS_NAMESPACE */ + \"__toast-container--rtl\"] = rtl, _cx));\n    return isFn(className) ? className({\n      position: position,\n      rtl: rtl,\n      defaultClassName: defaultClassName\n    }) : cx(defaultClassName, parseClassName(className));\n  }\n  return createElement(\"div\", {\n    ref: containerRef,\n    className: \"Toastify\"\n    /* CSS_NAMESPACE */,\n\n    id: containerId\n  }, getToastToRender(function (position, toastList) {\n    var containerStyle = !toastList.length ? _extends({}, style, {\n      pointerEvents: 'none'\n    }) : _extends({}, style);\n    return createElement(\"div\", {\n      className: getClassName(position),\n      style: containerStyle,\n      key: \"container-\" + position\n    }, toastList.map(function (_ref) {\n      var content = _ref.content,\n        toastProps = _ref.props;\n      return createElement(Toast, Object.assign({}, toastProps, {\n        isIn: isToastActive(toastProps.toastId),\n        key: \"toast-\" + toastProps.key,\n        closeButton: toastProps.closeButton === true ? CloseButton : toastProps.closeButton\n      }), content);\n    }));\n  }));\n};\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: 80\n  /* DRAGGABLE_PERCENT */,\n\n  draggableDirection: \"x\"\n  /* X */,\n\n  role: 'alert',\n  theme: 'light'\n};\nvar containers = /*#__PURE__*/new Map();\nvar latestInstance;\nvar containerDomNode;\nvar containerConfig;\nvar queue = [];\nvar lazy = false;\n/**\r\n * Get the toast by id, given it's in the DOM, otherwise returns null\r\n */\n\nfunction getToast(toastId, _ref) {\n  var containerId = _ref.containerId;\n  var container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n  return container.getToast(toastId);\n}\n/**\r\n * Generate a random toastId\r\n */\n\nfunction generateToastId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n/**\r\n * Generate a toastId or use the one provided\r\n */\n\nfunction getToastId(options) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n  return generateToastId();\n}\n/**\r\n * If the container is not mounted, the toast is enqueued and\r\n * the container lazy mounted\r\n */\n\nfunction dispatchToast(content, options) {\n  if (containers.size > 0) {\n    eventManager.emit(0\n    /* Show */, content, options);\n  } else {\n    queue.push({\n      content: content,\n      options: options\n    });\n    if (lazy && canUseDom) {\n      lazy = false;\n      containerDomNode = document.createElement('div');\n      document.body.appendChild(containerDomNode);\n      render(createElement(ToastContainer, Object.assign({}, containerConfig)), containerDomNode);\n    }\n  }\n  return options.toastId;\n}\n/**\r\n * Merge provided options with the defaults settings and generate the toastId\r\n */\n\nfunction mergeOptions(type, options) {\n  return _extends({}, options, {\n    type: options && options.type || type,\n    toastId: getToastId(options)\n  });\n}\nfunction createToastByType(type) {\n  return function (content, options) {\n    return dispatchToast(content, mergeOptions(type, options));\n  };\n}\nfunction toast(content, options) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\ntoast.loading = function (content, options) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, _extends({\n    isLoading: true,\n    autoClose: false,\n    closeOnClick: false,\n    closeButton: false,\n    draggable: false\n  }, options)));\n};\nfunction handlePromise(promise, _ref2, options) {\n  var pending = _ref2.pending,\n    error = _ref2.error,\n    success = _ref2.success;\n  var id;\n  if (pending) {\n    id = isStr(pending) ? toast.loading(pending, options) : toast.loading(pending.render, _extends({}, options, pending));\n  }\n  var resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null\n  };\n  var resolver = function resolver(type, input, result) {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n    var baseParams = _extends({\n      type: type\n    }, resetParams, options, {\n      data: result\n    });\n    var params = isStr(input) ? {\n      render: input\n    } : input; // if the id is set we know that it's an update\n\n    if (id) {\n      toast.update(id, _extends({}, baseParams, params));\n    } else {\n      // using toast.promise without loading\n      toast(params.render, _extends({}, baseParams, params));\n    }\n    return result;\n  };\n  var p = isFn(promise) ? promise() : promise; //call the resolvers only when needed\n\n  p.then(function (result) {\n    return resolver('success', success, result);\n  })[\"catch\"](function (err) {\n    return resolver('error', error, err);\n  });\n  return p;\n}\ntoast.promise = handlePromise;\ntoast.success = /*#__PURE__*/createToastByType(TYPE.SUCCESS);\ntoast.info = /*#__PURE__*/createToastByType(TYPE.INFO);\ntoast.error = /*#__PURE__*/createToastByType(TYPE.ERROR);\ntoast.warning = /*#__PURE__*/createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = function (content, options) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, _extends({\n    theme: 'dark'\n  }, options)));\n};\n/**\r\n * Remove toast programmaticaly\r\n */\n\ntoast.dismiss = function (id) {\n  return eventManager.emit(1\n  /* Clear */, id);\n};\n/**\r\n * Clear waiting queue when limit is used\r\n */\n\ntoast.clearWaitingQueue = function (params) {\n  if (params === void 0) {\n    params = {};\n  }\n  return eventManager.emit(5\n  /* ClearWaitingQueue */, params);\n};\n/**\r\n * return true if one container is displaying the toast\r\n */\n\ntoast.isActive = function (id) {\n  var isToastActive = false;\n  containers.forEach(function (container) {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n  return isToastActive;\n};\ntoast.update = function (toastId, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(function () {\n    var toast = getToast(toastId, options);\n    if (toast) {\n      var oldOptions = toast.props,\n        oldContent = toast.content;\n      var nextOptions = _extends({}, oldOptions, options, {\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      });\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n      var content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n/**\r\n * Used for controlled progress bar.\r\n */\n\ntoast.done = function (id) {\n  toast.update(id, {\n    progress: 1\n  });\n};\n/**\r\n * @deprecated\r\n * API will change in the next major release\r\n *\r\n * Track changes. The callback get the number of toast displayed\r\n */\n\ntoast.onChange = function (callback) {\n  if (isFn(callback)) {\n    eventManager.on(4\n    /* Change */, callback);\n  }\n  return function () {\n    isFn(callback) && eventManager.off(4\n    /* Change */, callback);\n  };\n};\n/**\r\n * @deprecated\r\n * will be removed in the next major release\r\n *\r\n * Configure the ToastContainer when lazy mounted\r\n * Prefer ToastContainer over this one\r\n */\n\ntoast.configure = function (config) {\n  if (config === void 0) {\n    config = {};\n  }\n  lazy = true;\n  containerConfig = config;\n};\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n/**\r\n * Wait until the ToastContainer is mounted to dispatch the toast\r\n * and attach isActive method\r\n */\n\neventManager.on(2\n/* DidMount */, function (containerInstance) {\n  latestInstance = containerInstance.containerId || containerInstance;\n  containers.set(latestInstance, containerInstance);\n  queue.forEach(function (item) {\n    eventManager.emit(0\n    /* Show */, item.content, item.options);\n  });\n  queue = [];\n}).on(3\n/* WillUnmount */, function (containerInstance) {\n  containers[\"delete\"](containerInstance.containerId || containerInstance);\n  if (containers.size === 0) {\n    eventManager.off(0\n    /* Show */).off(1\n    /* Clear */).off(5\n    /* ClearWaitingQueue */);\n  }\n\n  if (canUseDom && containerDomNode) {\n    document.body.removeChild(containerDomNode);\n  }\n});\nexport { Bounce, Flip, Icons, Slide, ToastContainer, Zoom, collapseToast, cssTransition, toast, useToast, useToastContainer };","map":null,"metadata":{},"sourceType":"module"}